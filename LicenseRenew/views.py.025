from celery import shared_task
from django.utils.timezone import now
from django.utils import timezone
from django.core.mail import send_mail
from .models import License
from django.contrib.auth.models import User

@shared_task
def send_renewal_reminder():
    today = timezone.now().date()
    licenses = License.objects.filter(expiry_date__gte=today)

    for license in licenses:
        
        expiry_date = license.expiry_date
        if (expiry_date - today).days <= 30:
            send_mail(
                'License Renewal Reminder',
                f'Your {license.license_type} license is due for renewal soon. Expiry date: {expiry_date}.',
                'from@example.com',
                [license.user.email],
                fail_silently=False,
            )
    return 'Renewal reminders sent.'







    class LicenseNotificationView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        
        send_renewal_reminder.delay() 
        return Response({'message': 'Renewal reminders have been queued for sending.'})






# REPORTS
class LicenseReport(APIView):
    def get(self, request):
        licenses = License.objects.all()
        serializer = LicenseSerializer(licenses, many=True)
        return Response(serializer.data)
    
# SENDS EXPIRY TO FRONTEND
def get_renewals(request):
    renewals = License.objects.all().values('expiry_date', 'notifications')
    return JsonResponse(list(renewals), safe=False) 


# Notification

class Notification(APIView):
    serializer_class = NotificationSerializer
    permission_classes = [IsAuthenticated]

    def get(self, request):
        print(self.request.user)
        notifications = Notification.objects.filter(user=request.user).order_by('-notification_date')
        
        print("Authenticated user:", request.user)
        print("Notifications:", notifications)
        
        serializer = self.serializer_class(notifications, many=True)
        return Response(serializer.data)


# API ViewSet
class LicenseViewSet(viewsets.ModelViewSet):
        queryset = License.objects.all()
        serializer_class = LicenseSerializer



LICENSE_TYPES = [
        ('Driver', 'Driver'),
        ('Business', 'Business'),
        ('Software', 'Software'),
    ]







































    